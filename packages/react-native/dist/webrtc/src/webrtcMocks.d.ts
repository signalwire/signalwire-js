declare class MediaStreamMock implements MediaStream {
    _tracks: MediaStreamTrack[];
    active: boolean;
    id: string;
    onactive: (this: MediaStream, ev: Event) => any;
    onaddtrack: (this: MediaStream, ev: MediaStreamTrackEvent) => any;
    oninactive: (this: MediaStream, ev: Event) => any;
    onremovetrack: (this: MediaStream, ev: MediaStreamTrackEvent) => any;
    addTrack(track: MediaStreamTrack): void;
    clone(): MediaStream;
    getTrackById(trackId: any): MediaStreamTrack;
    removeTrack(track: any): void;
    stop(): void;
    addEventListener(type: any, listener: any, options?: any): void;
    removeEventListener(type: any, listener: any, options?: any): void;
    dispatchEvent(event: Event): boolean;
    getTracks(): MediaStreamTrack[];
    getVideoTracks(): MediaStreamTrack[];
    getAudioTracks(): MediaStreamTrack[];
}
declare class MediaStreamTrackMock implements MediaStreamTrack {
    enabled: boolean;
    id: string;
    isolated: boolean;
    kind: string;
    label: string;
    muted: boolean;
    readonly: boolean;
    readyState: MediaStreamTrackState;
    remote: boolean;
    onended: (this: MediaStreamTrack, ev: any) => any;
    onisolationchange: (this: MediaStreamTrack, ev: Event) => any;
    onmute: (this: MediaStreamTrack, ev: Event) => any;
    onoverconstrained: (this: MediaStreamTrack, ev: any) => any;
    onunmute: (this: MediaStreamTrack, ev: Event) => any;
    applyConstraints(constraints: any): Promise<void>;
    clone(): MediaStreamTrack;
    getCapabilities(): MediaTrackCapabilities;
    getConstraints(): MediaTrackConstraints;
    getSettings(): MediaTrackSettings;
    stop(): void;
    addEventListener(type: any, listener: any, options?: any): void;
    removeEventListener(type: any, listener: any, options?: any): void;
    dispatchEvent(event: Event): boolean;
}
declare class RTCPeerConnectionMock implements RTCPeerConnection {
    canTrickleIceCandidates: boolean;
    connectionState: RTCPeerConnectionState;
    currentLocalDescription: RTCSessionDescription;
    currentRemoteDescription: RTCSessionDescription;
    iceConnectionState: RTCIceConnectionState;
    iceGatheringState: RTCIceGatheringState;
    idpErrorInfo: string;
    idpLoginUrl: string;
    localDescription: RTCSessionDescription;
    onconnectionstatechange: (this: RTCPeerConnection, ev: Event) => any;
    ondatachannel: (this: RTCPeerConnection, ev: RTCDataChannelEvent) => any;
    onicecandidate: (this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any;
    onicecandidateerror: (this: RTCPeerConnection, ev: RTCPeerConnectionIceErrorEvent) => any;
    oniceconnectionstatechange: (this: RTCPeerConnection, ev: Event) => any;
    onicegatheringstatechange: (this: RTCPeerConnection, ev: Event) => any;
    onnegotiationneeded: (this: RTCPeerConnection, ev: Event) => any;
    onsignalingstatechange: (this: RTCPeerConnection, ev: Event) => any;
    onstatsended: (this: RTCPeerConnection, ev: any) => any;
    ontrack: (this: RTCPeerConnection, ev: RTCTrackEvent) => any;
    peerIdentity: Promise<any>;
    pendingLocalDescription: RTCSessionDescription;
    pendingRemoteDescription: RTCSessionDescription;
    remoteDescription: RTCSessionDescription;
    sctp: any;
    signalingState: RTCSignalingState;
    addIceCandidate(candidate?: RTCIceCandidateInit | RTCIceCandidate): Promise<void>;
    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender;
    addTransceiver(trackOrKind: string | MediaStreamTrack, init?: RTCRtpTransceiverInit): any;
    close(): void;
    createAnswer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
    createAnswer(options?: RTCAnswerOptions): Promise<RTCSessionDescriptionInit>;
    createAnswer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel;
    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel;
    createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
    createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
    createOffer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback, options?: RTCOfferOptions): Promise<void>;
    getConfiguration(): RTCConfiguration;
    getIdentityAssertion(): Promise<string>;
    getReceivers(): RTCRtpReceiver[];
    getSenders(): RTCRtpSender[];
    getStats(selector?: MediaStreamTrack): Promise<RTCStatsReport>;
    getStats(selector?: MediaStreamTrack): Promise<RTCStatsReport>;
    getStats(selector: MediaStreamTrack, successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    getTransceivers(): RTCRtpTransceiver[];
    removeTrack(sender: RTCRtpSender): void;
    removeTrack(sender: RTCRtpSender): void;
    setConfiguration(configuration: RTCConfiguration): void;
    setConfiguration(configuration: RTCConfiguration): void;
    setIdentityProvider(provider: string, options?: any): void;
    setLocalDescription(description: RTCSessionDescriptionInit): Promise<void>;
    setLocalDescription(description: RTCSessionDescriptionInit): Promise<void>;
    setLocalDescription(description: RTCSessionDescriptionInit, successCallback: () => void, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;
    setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;
    setRemoteDescription(description: RTCSessionDescriptionInit, successCallback: () => void, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    addEventListener<K extends 'connectionstatechange' | 'datachannel' | 'icecandidate' | 'icecandidateerror' | 'iceconnectionstatechange' | 'icegatheringstatechange' | 'negotiationneeded' | 'signalingstatechange' | 'statsended' | 'track'>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends 'connectionstatechange' | 'datachannel' | 'icecandidate' | 'icecandidateerror' | 'iceconnectionstatechange' | 'icegatheringstatechange' | 'negotiationneeded' | 'signalingstatechange' | 'statsended' | 'track'>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => void, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    dispatchEvent(event: Event): boolean;
}
export { MediaStreamMock, MediaStreamTrackMock, RTCPeerConnectionMock };
//# sourceMappingURL=webrtcMocks.d.ts.map